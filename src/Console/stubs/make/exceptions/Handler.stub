<?php namespace {{namespace}}Exceptions;

use Exception, Csgt\Hermes\Hermes;
use Illuminate\Auth\AuthenticationException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Database\QueryException;
use Illuminate\Session\TokenMismatchException;

class Handler extends ExceptionHandler {

  protected $dontReport = [
    HttpException::class,
  ];

  public function report(Exception $e) {
    Hermes::notificarError($e);
    return parent::report($e);
  }

  public function render($request, Exception $e) {
    if ($e instanceof ModelNotFoundException) {
      $e = new NotFoundHttpException('No se encontrÃ³ el recurso.', $e);
    }
    if ($e instanceof QueryException) {
      $e = new BadRequestHttpException($e->errorInfo[2], $e);
    }
    if ($request->expectsJson() && $e instanceof TokenMismatchException) {
      $e = new UnauthorizedHttpException('Basic', null, $e);
    }
    if ($e instanceof HttpException) {
      $message = $e->getMessage();
      $statusCode = $e->getStatusCode();
      if ($request->expectsJson()) {
        return response()->json([
          'error' => $message
        ], $statusCode);
      } else {
        return response()
          ->view('errors.generic', ['mensaje' => $message], $statusCode);
      }
    }
    return parent::render($request, $e);
  }

  protected function unauthenticated($request, AuthenticationException $exception) {
    if ($request->expectsJson()) {
      return response()->json([
          'codigoerror'=> 999,
          'error' => $exception->getMessage(),
          'data' => []
        ], 401);
    }
    return redirect()->guest('login');
  }
}